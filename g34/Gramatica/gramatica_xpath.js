/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[1,30],$Vo=[5,6],$Vp=[5,6,8,12,14,41,43,44,45,46,47,48,49,50,51,52,53,54,56],$Vq=[2,43],$Vr=[1,36],$Vs=[5,6,8,12,14,39,41,43,44,45,46,47,48,49,50,51,52,53,54,56],$Vt=[1,39],$Vu=[1,38],$Vv=[5,6,14,41,43,44,45,46,47,48,49,50,51,52,53,54,56],$Vw=[2,10],$Vx=[1,45],$Vy=[1,46],$Vz=[1,49],$VA=[1,50],$VB=[1,51],$VC=[1,52],$VD=[1,76],$VE=[1,66],$VF=[1,67],$VG=[1,68],$VH=[1,69],$VI=[1,70],$VJ=[1,71],$VK=[1,72],$VL=[1,73],$VM=[1,74],$VN=[1,75],$VO=[1,77],$VP=[1,78],$VQ=[14,41,43,44,45,46,47,48,49,50,51,52,53,54,56],$VR=[41,43,44,45,46,47,48,49,50,56],$VS=[41,43,44,45,46,47,48,49,50,51,52,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"LISTARUTAS":4,"EOF":5,"union":6,"RUTA":7,"diagonal":8,"DATO":9,"MOSTRAR":10,"RUTA2":11,"doblediagonal":12,"identificador":13,"multiplicacion":14,"arroba":15,"TODOATRIBUTO":16,"punto":17,"doblepunto":18,"siguiente":19,"texto":20,"nodo":21,"posicion":22,"RESERVADAS":23,"dospuntos":24,"DATO1":25,"ancestros":26,"ancestroself":27,"atributos":28,"hijos":29,"descendiente":30,"descendienteself":31,"siguientes":32,"siguientehermano":33,"espacionombres":34,"padre":35,"anterior":36,"hemanoanterior":37,"mismo":38,"corabre":39,"OPEOCOND":40,"corcierra":41,"CONDICION":42,"or":43,"and":44,"igual":45,"mayorigualque":46,"menorigualque":47,"menorque":48,"mayorque":49,"distinto":50,"suma":51,"resta":52,"division":53,"mod":54,"para":55,"parc":56,"entero":57,"decimal":58,"cadena":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"union",8:"diagonal",12:"doblediagonal",13:"identificador",14:"multiplicacion",15:"arroba",17:"punto",18:"doblepunto",19:"siguiente",20:"texto",21:"nodo",22:"posicion",24:"dospuntos",26:"ancestros",27:"ancestroself",28:"atributos",29:"hijos",30:"descendiente",31:"descendienteself",32:"siguientes",33:"siguientehermano",34:"espacionombres",35:"padre",36:"anterior",37:"hemanoanterior",38:"mismo",39:"corabre",41:"corcierra",43:"or",44:"and",45:"igual",46:"mayorigualque",47:"menorigualque",48:"menorque",49:"mayorque",50:"distinto",51:"suma",52:"resta",53:"division",54:"mod",55:"para",56:"parc",57:"entero",58:"decimal",59:"cadena"},
productions_: [0,[3,2],[4,3],[4,1],[4,1],[7,4],[7,4],[7,3],[11,4],[11,4],[11,0],[9,1],[9,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[25,1],[25,1],[25,2],[25,1],[25,1],[25,1],[16,1],[16,1],[10,4],[10,0],[40,1],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,1],[42,1],[42,1],[42,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
        rg_path.setValor('inicio ->  LISTARUTAS;\n');
        console.log($$[$0-1]);
        return $$[$0-1]; 
        
break;
case 2:
         
                rg_path.setValor('LISTARUTAS -> LISTARUTAS union RUTA;\n');
                $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 3:

                rg_path.setValor('LISTARUTAS -> RUTA ;\n');
                this.$ = [$$[$0]];
break;
case 4:
 //console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
                        let errores = new NodoError(yytext, 'Sintactico', 'Token no esperado.', 'XPATH', this._$.first_line, this._$.first_column);
                        erroresXPATH.setError(errores);
break;
case 5:
 
        rg_path.setValor('RUTA -> / DATO MOSTRAR RUTA2;\n');
        this.$ = new nodoRuta($$[$0-2], $$[$0-1], $$[$0], TIPO_RUTA.DIAGONALSIMPLE, this._$.first_line, this._$.first_column); 

break;
case 6:
 
        rg_path.setValor('RUTA -> // DATO MOSTRAR RUTA2;\n');
        this.$ = new nodoRuta($$[$0-2], $$[$0-1], $$[$0], TIPO_RUTA.DIAGOBALDOBLE, this._$.first_line, this._$.first_column);
    
break;
case 7:
 
        rg_path.setValor('RUTA -> DATO MOSTRAR RUTA2;\n');
        this.$ = new nodoRuta($$[$0-2], $$[$0-1], $$[$0], TIPO_RUTA.DIAGONALVACIA, this._$.first_line, this._$.first_column);
    
break;
case 8:
 
                rg_path.setValor('RUTA2 -> / DATO MOSTRAR RUTA2;\n');
                this.$ = new nodoRuta($$[$0-2], $$[$0-1], $$[$0], TIPO_RUTA.DIAGONALSIMPLE, this._$.first_line, this._$.first_column);                

break;
case 9:
 
                rg_path.setValor('RUTA2 -> // DATO MOSTRAR RUTA2;\n');
                //nodoRuta(dato:any, mostrar:any, ruta2:any, tipoRuta:TIPO_RUTA, fila:number, columna:number) {
                this.$ = new nodoRuta($$[$0-2], $$[$0-1], $$[$0], TIPO_RUTA.DIAGOBALDOBLE, this._$.first_line, this._$.first_column);
        
break;
case 10:
rg_path.setValor('RUTA2 -> epsilon;\n'); 
break;
case 11:
 rg_path.setValor('DATO -> identificador;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.IDENTIFICADOR,this._$.first_line, this._$.first_column);
break;
case 12:
 rg_path.setValor('DATO -> multiplicacion;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.ASTERISCO,this._$.first_line, this._$.first_column);
break;
case 13:
 rg_path.setValor('DATO -> @ TODOATRIBUTO;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.ARROBA,this._$.first_line, this._$.first_column);
break;
case 14:
 rg_path.setValor('DATO -> punto;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.PUNTO,this._$.first_line, this._$.first_column);
break;
case 15:
 rg_path.setValor('DATO -> doblepunto;\n');
                                this.$ = new nodoDator($$[$0], TIPO_DATO.DOBLEPUNTO,this._$.first_line, this._$.first_column);
break;
case 16:
 rg_path.setValor('DATO -> siguiente;\n');
                                this.$ = new nodoDator($$[$0], TIPO_DATO.SIGUIENTE,this._$.first_line, this._$.first_column);
break;
case 17:
 rg_path.setValor('DATO -> texto;\n'); this.$=$$[$0];
                                this.$ = new nodoDator($$[$0], TIPO_DATO.TEXTO,this._$.first_line, this._$.first_column);
break;
case 18:
 rg_path.setValor('DATO -> nodo;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.NODO,this._$.first_line, this._$.first_column);
break;
case 19:
 rg_path.setValor('DATO -> posicion;\n');
                                this.$ = new nodoDator($$[$0], TIPO_DATO.POSICION,this._$.first_line, this._$.first_column);
break;
case 20:
 rg_path.setValor('DATO -> RESERVADS :: DATO1 ;\n'); 
                                this.$ = new nodoDatorersva($$[$0-2], $$[$0], TIPO_DATO.RESERVADAS,this._$.first_line, this._$.first_column);
break;
case 21:
  rg_path.setValor('RESERVADAS -> ancestros;\n'); this.$=$$[$0];
break;
case 22:
  rg_path.setValor('RESERVADAS -> ancestroself;\n'); this.$=$$[$0];
break;
case 23:
  rg_path.setValor('RESERVADAS -> atributos;\n'); this.$=$$[$0];
break;
case 24:
  rg_path.setValor('RESERVADAS -> hijos;\n'); this.$=$$[$0];
break;
case 25:
  rg_path.setValor('RESERVADAS -> descendiente;\n'); this.$=$$[$0];
break;
case 26:
  rg_path.setValor('RESERVADAS -> descendienteself;\n'); this.$=$$[$0];
break;
case 27:
  rg_path.setValor('RESERVADAS -> siguientes;\n'); this.$=$$[$0];
break;
case 28:
  rg_path.setValor('RESERVADAS -> siguientehermano;\n'); this.$=$$[$0];
break;
case 29:
  rg_path.setValor('RESERVADAS -> espacionombres;\n'); this.$=$$[$0];
break;
case 30:
  rg_path.setValor('RESERVADAS -> padre;\n'); this.$=$$[$0];
break;
case 31:
  rg_path.setValor('RESERVADAS -> anterior;\n'); this.$=$$[$0];
break;
case 32:
  rg_path.setValor('RESERVADAS -> hemanoanterior;\n'); this.$=$$[$0];
break;
case 33:
  rg_path.setValor('RESERVADAS -> mismo;\n'); this.$=$$[$0];
break;
case 34:
 rg_path.setValor('DATO1 -> identificador;\n');
                                this.$ = new nodoDator($$[$0], TIPO_DATO.IDENTIFICADOR,this._$.first_line, this._$.first_column);
break;
case 35:
 rg_path.setValor('DATO1 -> multiplicacion;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.ASTERISCO,this._$.first_line, this._$.first_column);
break;
case 36:
 rg_path.setValor('DATO1 -> @ TODOATRIBUTO;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.ARROBA,this._$.first_line, this._$.first_column);
break;
case 37:
  rg_path.setValor('DATO1 -> siguiente;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.SIGUIENTE,this._$.first_line, this._$.first_column);
break;
case 38:
  rg_path.setValor('DATO1 -> texto;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.TEXTO,this._$.first_line, this._$.first_column);
break;
case 39:
  rg_path.setValor('DATO1 -> nodo;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.NODO,this._$.first_line, this._$.first_column);
break;
case 40:
 rg_path.setValor('TODOATRIBUTO -> multiplicacion;\n'); 
                                this.$ = new nodoDator($$[$0], TIPO_DATO.ASTERISCO,this._$.first_line, this._$.first_column);
break;
case 41:
  rg_path.setValor('TODOATRIBUTO -> identificador;\n');  
                                this.$ = new nodoDator($$[$0], TIPO_DATO.IDENTIFICADOR,this._$.first_line, this._$.first_column);
break;
case 42:
 rg_path.setValor('MOSTRAR -> [ OPEOCOND ]  MOSTRAR;\n');
                                this.$ = new nodoMostrar($$[$0-2],$$[$0], this._$.first_line, this._$.first_column);
break;
case 43:
 rg_path.setValor('MOSTRAR -> epsilon;\n'); this.$ = '';
break;
case 44:
 rg_path.setValor('OPEOCOND -> identificador;\n'); this.$ = $$[$0];
break;
case 45:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION and CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_IGUAL, TIPO_EXPRESION.OP_OR, this._$.first_line, this._$.first_column);
break;
case 46:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION or CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_IGUAL, TIPO_EXPRESION.OP_AND, this._$.first_line, this._$.first_column);
break;
case 47:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION = CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_IGUAL, TIPO_EXPRESION.OP_RELACIONAL, this._$.first_line, this._$.first_column);
break;
case 48:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION >= CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_MAYOR_IGUAL, TIPO_EXPRESION.OP_RELACIONAL, this._$.first_line, this._$.first_column);
break;
case 49:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION <= CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_MENOR_IGUAL, TIPO_EXPRESION.OP_RELACIONAL, this._$.first_line, this._$.first_column);
break;
case 50:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION < CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_MENOR_QUE, TIPO_EXPRESION.OP_RELACIONAL, this._$.first_line, this._$.first_column);
break;
case 51:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION > CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_MAYOR_QUE, TIPO_EXPRESION.OP_RELACIONAL, this._$.first_line, this._$.first_column);
break;
case 52:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION != CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_NO_IGUAL, TIPO_EXPRESION.OP_RELACIONAL, this._$.first_line, this._$.first_column);
break;
case 53:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION + CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_SUMA, TIPO_EXPRESION.OP_ARITMETICA, this._$.first_line, this._$.first_column);
break;
case 54:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION - CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_RESTA, TIPO_EXPRESION.OP_ARITMETICA, this._$.first_line, this._$.first_column);
break;
case 55:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION * CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_MULTIPLICACION, TIPO_EXPRESION.OP_ARITMETICA, this._$.first_line, this._$.first_column);
break;
case 56:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION / CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_DIVISION, TIPO_EXPRESION.OP_ARITMETICA, this._$.first_line, this._$.first_column);
break;
case 57:
rg_path.setValor('OPEOCCONDICIONOND -> CONDICION % CONDICION;\n');
                                                        this.$ = nodoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OP_MODULAR, TIPO_EXPRESION.OP_ARITMETICA, this._$.first_line, this._$.first_column);
break;
case 58:
rg_path.setValor('OPEOCCONDICIONOND -> ( CONDICION ) ;\n');
                                                        this.$ = $$[$0-1]; 
break;
case 59:
rg_path.setValor('OPEOCCONDICIONOND ->  entero;\n');
                                                        this.$ = nodoDato($$[$0], TIPO_PRIMITIVO.NUMERICO);
break;
case 60:
rg_path.setValor('OPEOCCONDICIONOND ->  decimal;\n');
                                                        this.$ = nodoDato($$[$0], TIPO_PRIMITIVO.NUMERICO);
break;
case 61:
rg_path.setValor('OPEOCCONDICIONOND ->  cadena;\n');
                                                        this.$ = nodoDato($$[$0], TIPO_PRIMITIVO.CADENA);
break;
case 62:
  this.$=$$[$0];
break;
}
},
table: [{2:[1,4],3:1,4:2,7:3,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn},{1:[3]},{5:[1,31],6:[1,32]},o($Vo,[2,3]),o($Vo,[2,4]),{9:33,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn},{9:34,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn},o($Vp,$Vq,{10:35,39:$Vr}),o($Vs,[2,11]),o($Vs,[2,12]),{13:$Vt,14:$Vu,16:37},o($Vs,[2,14]),o($Vs,[2,15]),o($Vs,[2,16]),o($Vs,[2,17]),o($Vs,[2,18]),o($Vs,[2,19]),{24:[1,40]},{24:[2,21]},{24:[2,22]},{24:[2,23]},{24:[2,24]},{24:[2,25]},{24:[2,26]},{24:[2,27]},{24:[2,28]},{24:[2,29]},{24:[2,30]},{24:[2,31]},{24:[2,32]},{24:[2,33]},{1:[2,1]},{7:41,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn},o($Vp,$Vq,{10:42,39:$Vr}),o($Vp,$Vq,{10:43,39:$Vr}),o($Vv,$Vw,{11:44,8:$Vx,12:$Vy}),{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,40:47,42:48,55:$Vz,57:$VA,58:$VB,59:$VC},o($Vs,[2,13]),o($Vs,[2,40]),o($Vs,[2,41]),{13:[1,55],14:[1,56],15:[1,57],19:[1,58],20:[1,59],21:[1,60],25:54},o($Vo,[2,2]),o($Vv,$Vw,{11:61,8:$Vx,12:$Vy}),o($Vv,$Vw,{11:62,8:$Vx,12:$Vy}),o($Vv,[2,7]),{9:63,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn},{9:64,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn},{41:[1,65]},{14:$VD,41:[2,44],43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:79,55:$Vz,57:$VA,58:$VB,59:$VC},o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),o($Vs,[2,20]),o($Vs,[2,34]),o($Vs,[2,35]),{13:$Vt,14:$Vu,16:80},o($Vs,[2,37]),o($Vs,[2,38]),o($Vs,[2,39]),o($Vv,[2,5]),o($Vv,[2,6]),o($Vp,$Vq,{10:81,39:$Vr}),o($Vp,$Vq,{10:82,39:$Vr}),o($Vp,$Vq,{10:83,39:$Vr}),{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:84,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:85,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:86,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:87,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:88,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:89,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:90,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:91,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:92,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:93,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:94,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:95,55:$Vz,57:$VA,58:$VB,59:$VC},{7:53,8:$V0,9:7,12:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,23:17,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,42:96,55:$Vz,57:$VA,58:$VB,59:$VC},{14:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,56:[1,97]},o($Vs,[2,36]),o($Vv,$Vw,{11:98,8:$Vx,12:$Vy}),o($Vv,$Vw,{11:99,8:$Vx,12:$Vy}),o($Vp,[2,42]),o([41,43,56],[2,45],{14:$VD,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o([41,43,44,56],[2,46],{14:$VD,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o($VR,[2,47],{14:$VD,51:$VM,52:$VN,53:$VO,54:$VP}),o($VR,[2,48],{14:$VD,51:$VM,52:$VN,53:$VO,54:$VP}),o($VR,[2,49],{14:$VD,51:$VM,52:$VN,53:$VO,54:$VP}),o($VR,[2,50],{14:$VD,51:$VM,52:$VN,53:$VO,54:$VP}),o($VR,[2,51],{14:$VD,51:$VM,52:$VN,53:$VO,54:$VP}),o($VR,[2,52],{14:$VD,51:$VM,52:$VN,53:$VO,54:$VP}),o($VS,[2,53],{14:$VD,53:$VO,54:$VP}),o($VS,[2,54],{14:$VD,53:$VO,54:$VP}),o($VQ,[2,55]),o($VQ,[2,56]),o($VQ,[2,57]),o($VQ,[2,58]),o($Vv,[2,8]),o($Vv,[2,9])],
defaultActions: {18:[2,21],19:[2,22],20:[2,23],21:[2,24],22:[2,25],23:[2,26],24:[2,27],25:[2,28],26:[2,29],27:[2,30],28:[2,31],29:[2,32],30:[2,33],31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 12;
break;
case 1:return 8;
break;
case 2:return 55;
break;
case 3:return 56;
break;
case 4:return 39;
break;
case 5:return 41;
break;
case 6:return 24;
break;
case 7:return 6;
break;
case 8:return 51;
break;
case 9:return 52;
break;
case 10:return 14;
break;
case 11:return 53;
break;
case 12:return 45;
break;
case 13:return 50;
break;
case 14:return 47;
break;
case 15:return 46;
break;
case 16:return 48;
break;
case 17:return 49;
break;
case 18:return 44;
break;
case 19:return 43;
break;
case 20:return 54;
break;
case 21:return 18;
break;
case 22:return 17;
break;
case 23:return 15;
break;
case 24:return 21;
break;
case 25:return 20;
break;
case 26:return 19;
break;
case 27:return 22;
break;
case 28:return 26;
break;
case 29:return 27;
break;
case 30:return 28;
break;
case 31:return 29;
break;
case 32:return 30;
break;
case 33:return 31;
break;
case 34:return 32;
break;
case 35:return 33;
break;
case 36:return 34;
break;
case 37:return 35;
break;
case 38:return 36;
break;
case 39:return 37;
break;
case 40:return 38;
break;
case 41:
break;
case 42:
break;
case 43:return 58;
break;
case 44:return 57;
break;
case 45: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 46:return 13;
break;
case 47:return 5;
break;
case 48: console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        let errores = new NodoError(yy_.yytext, 'Lexico', 'Token no perteneciente al lenguaje.', 'XPATH', yy_.yylloc.first_line, yy_.yylloc.first_column);
                        erroresXPATH.setError(errores);
                    
break;
}
},
rules: [/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:::)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:mod\b)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:descendant-or-self\b)/i,/^(?:following\b)/i,/^(?:following-sibling\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:preceding-sibling\b)/i,/^(?:self\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:".*?"|'.*?'|`.*?`)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_xpath;
exports.Parser = gramatica_xpath.Parser;
exports.parse = function () { return gramatica_xpath.parse.apply(gramatica_xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}